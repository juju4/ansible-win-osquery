{{ ansible_managed | comment('c') }}
// https://osquery.io/docs/tables/#windows
// https://brewfault.io/blog/2017/9/24/local-configuration-for-osquery-on-windows
{
  "platform": "windows",
  "queries": {
    "arp_cache": {
      "query" : "select * from arp_cache;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Address resolution cache, both static and dynamic (from ARP, NDP)."
    },
    "interface_addresses": {
      "query" : "select * from interface_addresses;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Network interfaces and relevant metadata."
    },
    "win_appcompat_shims": {
      "query" : "select * from appcompat_shims;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Info on Application Compatibility shims"
    },
{% if win_osquery_watch_autoexec %}
    "win_autoexec": {
      "query" : "select * from autoexec;",
{% if osquery_testing %}
      "interval": "20",
{% else %}
      "interval": "{{ win_osquery_interval2 }}",
{% endif %}
      "platform": "windows",
      "description" : "Aggregate of executables that will automatically execute on the target machine"
    },
{% endif %}
    "win_bitlocker_info": {
      "query": "select * from bitlocker_info;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Retrieve bitlocker status of the machine."
    },
    "win_certificates": {
      "query": "select * from certificates;",
      "interval" : "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Certificate Authorities installed in Keychains/ca-bundles"
    },
    "win_chocolatey_packages": {
      "query": "select * from chocolatey_packages;",
      "interval" : "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Chocolatey packages installed in a system."
    },
    "win_crashes": {
      "query": "select * from windows_crashes;",
      "interval" : "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Extracted information from Windows crash logs (Minidumps)."
    },
{% if win_osquery_watch_drivers %}
    "win_drivers": {
      "query" : "select * from drivers;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Lists all installed and loaded Windows Drivers"
    },
{% endif %}
    "win_etc_hosts": {
      "query": "select * from etc_hosts;",
{% if osquery_testing %}
      "interval": "20",
{% else %}
      "interval": "{{ win_osquery_interval2 }}",
{% endif %}
      "platform": "windows",
      "description" : "Line-parsed hosts file."
    },
// https://blog.trailofbits.com/2017/10/10/tracking-a-stolen-code-signing-certificate-with-osquery/
    "win_files_invalid_microsoft": {
        "query" : "SELECT files.path AS path, authenticode.subject_name AS subject_name, authenticode.serial_number AS serial_number, authenticode.result AS status, hashes.sha256 AS sha256 FROM ( SELECT * FROM file WHERE directory = 'C:\\' ) AS files LEFT JOIN signature AS authenticode ON authenticode.path = files.path LEFT JOIN hash AS hashes ON hashes.path = files.path WHERE authenticode.subject_name LIKE '%Microsoft%' AND authenticode.result == 'invalid';",
        "interval": "{{ win_osquery_interval2 }}",
        "platform": "windows",
        "description" : "list files with invalid signatures marked as Microsoft."
    },
    "win_groups": {
      "query": "select * from groups;",
      "interval": {{ win_osquery_interval2 }},
      "platform": "windows",
      "description" : "Local system groups."
    },
    "win_ie_extensions": {
      "query" : "select * from ie_extensions;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Internet Explorer browser extensions"
    },
{% if win_osquery_watch_network %}
    "win_listening_ports": {
      "query": "select * from listening_ports;",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "Lists all the listening ports."
    },
    "win_listening_ports_signature": {
      "query": "SELECT port_info.pid, port_info.family, port_info.protocol, port_info.port, port_info.address, process.name, process.path, authenticode.result AS authenticode FROM listening_ports AS port_info LEFT JOIN processes AS process ON port_info.pid = process.pid LEFT JOIN signature AS authenticode ON process.path = authenticode.path",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "Lists all the listening ports with their signature status."
    },
{% endif %}
    "win_patches": {
      "query" : "select * from patches;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Lists all the patches applied. Note: This does not include patches applied via MSI or downloaded from Windows Update (e.g. Service Packs)."
    },
    "win_pipes": {
      "query" : "select * from pipes;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Named and Anonymous pipes."
    },
{% if win_osquery_watch_process %}
    "win_process": {
      "query": "select * from processes;",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "list processes."
    },
    "win_process_open_sockets": {
      "query": "select * from process_open_sockets;",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "Processes which have open network sockets on the system."
    },
    "win_process_signatures": {
      "query": "SELECT process.pid, process.path, authenticode.result FROM processes as process LEFT JOIN signature AS authenticode ON process.path = authenticode.path;",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "list processes with their signature status."
    },
{% endif %}
    "win_programs": {
      "query" : "select * from programs;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "list products as they are installed by Windows Installer."
    },
{% if win_osquery_watch_registry %}
    "win_registry": {
      "query" : "select * from registry;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "All of the Windows registry hives"
    },
{% endif %}
{% if win_osquery_watch_schtasks %}
    "win_scheduled_tasks": {
      "query" : "select * from scheduled_tasks;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Lists all of the tasks in the Windows Task Scheduler"
    },
{% endif %}
{% if win_osquery_watch_services %}
    "win_services": {
      "query" : "select * from services;",
{% if osquery_testing %}
      "interval": "20",
{% else %}
      "interval": "{{ win_osquery_interval2 }}",
{% endif %}
      "platform": "windows",
      "description" : "Lists all installed Windows Services"
    },
{% endif %}
    "win_shared_resources": {
      "query" : "select * from shared_resources;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Displays shared resources on a computer system running Windows"
    },
{% if win_osquery_watch_startups %}
    "win_startup_items": {
      "query": "select * from startup_items;",
      "interval": {{ win_osquery_interval2 }},
      "platform": "windows",
      "description" : "Applications and binaries set as user/login startup items."
    },
{% endif %}
    "win_user_groups": {
      "query": "select * from user_groups;",
      "interval": {{ win_osquery_interval2 }},
      "platform": "windows",
      "description" : "Local system user group relationships."
    },
    "win_users": {
      "query": "select * from users;",
      "interval": {{ win_osquery_interval2 }},
      "platform": "windows",
      "description" : "Local user accounts (including domain accounts that have logged on locally (Windows))."
{% if win_osquery_watch_wmi %}
    },
    "win_wmi_cli_event_consumers": {
      "query" : "select filter,consumer,query,command_line_template,wcec.name from wmi_cli_event_consumers wcec left outer join wmi_filter_consumer_binding wcb on consumer = wcec.relative_path left outer join wmi_event_filters wef on wef.relative_path = wcb.filter;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "WMI CommandLineEventConsumer, which can be used for persistance on Windows"
    },
    "win_wmi_event_filters": {
      "query": "select * from wmi_event_filters;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Lists WMI event filters"
    },
    "win_wmi_filter_consumer_binding": {
      "query": "select * from wmi_filter_consumer_binding;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Lists the relationship between event consumers and filters"
    },
    "win_wmi_script_event_consumers": {
      "query" : "select filter,consumer,query,scripting_engine,script_file_name,script_text,wsec.name from wmi_script_event_consumers wsec left outer join wmi_filter_consumer_binding wcb on consumer = wsec.relative_path left outer join wmi_event_filters wef on wef.relative_path = wcb.filter;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "WMI ActiveScriptEventConsumer, which can be used for persistance on Windows"
{% endif %}
{% if win_osquery_fetch_evtlogs %}
    },
{% for evt in win_osquery_fetch_evtlogs_list %}
    "windows_events_{{ evt.n }}": {
      "query" : "select * from windows_events where channel='{{ evt.ch }}' and (eventid={{ evt.id }});",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - {{ evt.d }}"
    }{% if not loop.last %},{% endif %}
{% endfor %}
{% else %}
    }
{% endif %}
  }
}
