// {{ ansible_managed }}
// https://osquery.io/docs/tables/#windows
// https://brewfault.io/blog/2017/9/24/local-configuration-for-osquery-on-windows
{
  "platform": "windows",
  "queries": {
    "win_appcompat_shims": {
      "query" : "select * from appcompat_shims;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Info on Application Compatibility shims"
    },
    "win_autoexec": {
      "query" : "select * from autoexec;",
{% if osquery_testing %}
      "interval": "20",
{% else %}
      "interval": "{{ win_osquery_interval2 }}",
{% endif %}
      "platform": "windows",
      "description" : "Aggregate of executables that will automatically execute on the target machine"
    },
    "win_certificates": {
      "query": "select * from certificates;",
      "interval" : "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Certificate Authorities installed in Keychains/ca-bundles"
    },
    "win_crashes": {
      "query": "select * from windows_crashes;",
      "interval" : "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Extracted information from Windows crash logs (Minidumps)."
    },
    "win_drivers": {
      "query" : "select * from drivers;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Lists all installed and loaded Windows Drivers"
    },
    "win_etc_hosts": {
      "query": "select * from etc_hosts;",
{% if osquery_testing %}
      "interval": "20",
{% else %}
      "interval": "{{ win_osquery_interval2 }}",
{% endif %}
      "platform": "windows",
      "description" : "Line-parsed hosts file."
    },
// https://blog.trailofbits.com/2017/10/10/tracking-a-stolen-code-signing-certificate-with-osquery/
    "win_files_invalid_microsoft": {
        "query" : "SELECT files.path AS path, authenticode.subject_name AS subject_name, authenticode.serial_number AS serial_number, authenticode.result AS status, hashes.sha256 AS sha256 FROM ( SELECT * FROM file WHERE directory = 'C:\\' ) AS files LEFT JOIN signature AS authenticode ON authenticode.path = files.path LEFT JOIN hash AS hashes ON hashes.path = files.path WHERE authenticode.subject_name LIKE '%Microsoft%' AND authenticode.result == 'invalid';",
        "interval": "{{ win_osquery_interval2 }}",
        "platform": "windows",
        "description" : "list files with invalid signatures marked as Microsoft."
    },
    "win_heartbeat": {
      "query": "select si.hostname, si.uuid, si.computer_name, up.total_seconds as uptime from system_info si, uptime up;",
      "interval": 900,
      "snapshot": "true",
      "platform": "windows",
      "description" : "System info and uptime as heartbeat"
    },
    "win_ie_extensions": {
      "query" : "select * from ie_extensions;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Internet Explorer browser extensions"
    },
    "win_listening_ports": {
      "query": "select * from listening_ports;",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "Lists all the listening ports."
    },
    "win_listening_ports_signature": {
      "query": "SELECT port_info.pid, port_info.family, port_info.protocol, port_info.port, port_info.address, process.name, process.path, authenticode.result AS authenticode FROM listening_ports AS port_info LEFT JOIN processes AS process ON port_info.pid = process.pid LEFT JOIN signature AS authenticode ON process.path = authenticode.path",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "Lists all the listening ports with their signature status."
    },
    "win_patches": {
      "query" : "select * from patches;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Lists all the patches applied. Note: This does not include patches applied via MSI or downloaded from Windows Update (e.g. Service Packs)."
    },
    "win_process": {
      "query": "select * from processes;",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "list processes."
    },
    "win_process_signatures": {
      "query": "SELECT process.pid, process.path, authenticode.result FROM processes as process LEFT JOIN signature AS authenticode ON process.path = authenticode.path;",
      "interval": {{ win_osquery_interval }},
      "platform": "windows",
      "description" : "list processes with their signature status."
    },
    "win_programs": {
        "query" : "select * from programs;",
        "interval": "{{ win_osquery_interval2 }}",
        "platform": "windows",
        "description" : "list products as they are installed by Windows Installer."
    },
    "win_registry": {
      "query" : "select * from registry;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "All of the Windows registry hives"
    },
    "win_scheduled_tasks": {
      "query" : "select * from scheduled_tasks;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Lists all of the tasks in the Windows Task Scheduler"
    },
    "win_services": {
      "query" : "select * from services;",
{% if osquery_testing %}
      "interval": "20",
{% else %}
      "interval": "{{ win_osquery_interval2 }}",
{% endif %}
      "platform": "windows",
      "description" : "Lists all installed Windows Services"
    },
    "win_shared_resources": {
      "query" : "select * from shared_resources;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Displays shared resources on a computer system running Windows"
    },
    "win_startup_items": {
      "query": "select * from startup_items;",
      "interval": {{ win_osquery_interval2 }},
      "platform": "windows",
      "description" : "Applications and binaries set as user/login startup items."
    },
    "win_wmi_cli_event_consumers": {
      "query" : "select filter,consumer,query,command_line_template,wcec.name from wmi_cli_event_consumers wcec left outer join wmi_filter_consumer_binding wcb on consumer = wcec.relative_path left outer join wmi_event_filters wef on wef.relative_path = wcb.filter;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "WMI CommandLineEventConsumer, which can be used for persistance on Windows"
    },
    "win_wmi_event_filters": {
      "query": "select * from wmi_event_filters;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Lists WMI event filters"
    },
    "win_wmi_filter_consumer_binding": {
      "query": "select * from wmi_filter_consumer_binding;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description": "Lists the relationship between event consumers and filters"
    },
    "win_wmi_script_event_consumers": {
      "query" : "select filter,consumer,query,scripting_engine,script_file_name,script_text,wsec.name from wmi_script_event_consumers wsec left outer join wmi_filter_consumer_binding wcb on consumer = wsec.relative_path left outer join wmi_event_filters wef on wef.relative_path = wcb.filter;",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "WMI ActiveScriptEventConsumer, which can be used for persistance on Windows"
{% if win_osquery_fetch_evtlogs %}
    },
// depends if you use Windows Event Forwarder or similar mechanisms. Arbitrary choice among many (also 7045,4663,5156,7040...)
    "windows_events_sec_4688": {
      "query" : "select * from windows_events where eventid=4688 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - A new process has been created"
    },
    "windows_events_sec_4624": {
      "query" : "select * from windows_events where eventid=4624 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - An account was successfully logged on"
    },
    "windows_events_sec_4625": {
      "query" : "select * from windows_events where eventid=4625 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - An account failed to log on"
    },
    "windows_events_sec_4698": {
      "query" : "select * from windows_events where eventid=4698 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - A scheduled task was created"
    },
    "windows_events_sec_4697": {
      "query" : "select * from windows_events where eventid=4697 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - A service was installed in the system"
    },
    "windows_events_sec_5140": {
      "query" : "select * from windows_events where eventid=5140 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - A network share object was accessed"
    },
    "windows_events_sec_5145": {
      "query" : "select * from windows_events where eventid=5145 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - A network share object was checked to see whether client can be granted desired access"
    },
    "windows_events_sec_4672": {
      "query" : "select * from windows_events where eventid=4672 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - Special privileges assigned to new logon"
    },
    "windows_events_sec_4104": {
      "query" : "select * from windows_events where eventid=4104 and channel='Security';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - Microsoft Distributed Transaction Coordinator Service Installation and Setup"
    },
    "windows_events_sec_1000": {
      "query" : "select * from windows_events where eventid=1000 and channel='Application';",
      "interval": "{{ win_osquery_interval2 }}",
      "platform": "windows",
      "description" : "Matching Windows Event logs - Application Error"
{% endif %}
    }
  }
}
